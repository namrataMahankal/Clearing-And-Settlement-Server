package com.clearing.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.javatuples.Pair;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
// import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.clearing.entity.TradeEntity;
import com.clearing.json.Trade;
import com.clearing.repository.TradeRepository;
import com.clearing.service.ClearingMemberService;
import com.clearing.service.EquitySummaryService;
import com.clearing.service.TradeService;

// import com.clearing.Settle;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/trades") // This means URL's start with /demo (after Application path)
public class TradeController {
	@Autowired // This means to get the bean called tradeRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private TradeRepository tradeRepository;

	@Autowired
	private TradeService tradeService;

	@Autowired
	private EquitySummaryService equitySummaryService;

	@Autowired
	private ClearingMemberService clearingMemberService;

	// Generate Random Trades
	@GetMapping(path = "/generate")
	public @ResponseBody List<TradeEntity> generateTrades() {
		return tradeService.generateTrades();
	}

	// Fetch All Trades
	@GetMapping(path = "/allTrades")
	public @ResponseBody List<Trade> getAllTrades() {
		return tradeService.getAllTrades();
	}

	// Add Random Trades
	@GetMapping(path = "/addRandom") // Later add Parameter
	public @ResponseBody void addRandomTrade() {
		// This returns a JSON or XML with the
		int numTrades = 5; // For now
		ArrayList<TradeEntity> randomTrades = new ArrayList<TradeEntity>();

		for (int i = 0; i < numTrades; ++i) {
			randomTrades.add(tradeService.createTrade());
		}
		tradeRepository.saveAll(randomTrades);
	}

	@GetMapping("/id/{CMId}")
	public @ResponseBody List<Trade> getTradesById(@PathVariable("CMId") int CMId) {
		return tradeService.getTradesById(CMId);
	}
	
	@GetMapping(path = "/settle")
	public @ResponseBody Pair<HashMap<Integer, Float>, HashMap<Integer, HashMap<Integer, Integer>>> settleTrades() {
		Pair<HashMap<Integer, Float>, HashMap<Integer, HashMap<Integer, Integer>>> obligationHashMap = tradeService.hashMapifyTrades();
		HashMap<Integer, Float> transactionAmountHashMap = obligationHashMap.getValue0();
		HashMap<Integer, HashMap<Integer, Integer>> quantityHashMap = obligationHashMap.getValue1();

		// Adding settlementChange to equitySummary Table
		equitySummaryService.addChangeAfterSettlement(quantityHashMap);

		// Adding amountToPay to clearingMember Table
		clearingMemberService.addChangeAfterSettlement(transactionAmountHashMap);

		return obligationHashMap;
	}

}

